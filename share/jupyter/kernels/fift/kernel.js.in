define([
    'codemirror/lib/codemirror', 
    'codemirror/addon/mode/simple'
], function(CodeMirror) {
    var builtin_words = /(?<=\s|^)(?:(builtin_words))(?=\s|$)/;
    var fift_words = /(?<=\s|^)(?:(fift_words))(?=\s|$)/;
    var asm_words = /(?<=\s|^)(?:(asm_words))(?=\s|$)/;
    var onload = function() {
        CodeMirror.defineSimpleMode("fift", {
            start: [
                // strings
                { regex: /"(?:[^\\]|\\.)*?(?:"|$)/, token: "string" },
                // bytes
                { regex: /(?<=\s|^)B\{[A-z0-9_]+\}(?=\s|$)/, token: "string" },
                // slices
                { regex: /(?<=\s|^)x\{[A-z0-9_]+\}(?=\s|$)/, token: "string-2" },
                { regex: /(?<=\s|^)b\{[01]+\}(?=\s|$)/, token: "string-2" },
                // comments
                { regex: /\/\/.*/, token: "comment" },
                { regex: /\/\*/, token: "comment", next: "comment" },
                // registers c0-7, s0-15
                { regex: /(?<=\s|^)(?:c[0-7])|(?:s[0-9]{1,3})(?=\s|$)/, token: "builtin" },
                // asm constants
                { regex: /(?<=\s|^)(?:main|recv_internal|recv_external)(?=\s|$)/, token: "builtin" },
                // vm specific words
                { regex: /(?<=\s|^)(?:runvmcode|runvmdict|runvm|runvmctx|gasrunvmcode|gasrunvmdict|gasrunvm|gasrunvmctx)(?=\s|$)/, token: "operator" },
                // some control words
                { regex: /(?<=\s|^)(?:true|false|if|ifnot|cond|until|while|abort|words|does|[\[\(]?compile[\]\)]?|\.s?|csr\.|include)(?=\s|$)/, token: "keyword" },
                // numbers
                { regex: /(?<=\s|^)(?:(?:[+-]?[0-9]+\.?[0-9]*)|(?:0x[0-9a-f]+)|(?:0b[01]+))(?=\s|$)/i, token: "number" },
                // builder <b ... b> and cell <s ... s> (multiline)
                { regex: /(?<=\s|^)\<[bs](?=\s|$)/, token: "atom", indent: true },
                { regex: /(?<=\s|^)[bs]\>(?=\s|$)/, token: "atom", dedent: true },
                // asm code <{ ... }>s/c and control instructions PROC, CONT, REPEAT, IF, ELSE, etc (multiline)
                { regex: /(?<=\s|^)[A-Z:]*<\{(?=\s|$)/, token: "atom", indent: true },
                { regex: /(?<=\s|^)(?:\}(?:END)?>[A-Zsc:]*)(?=\s|$)/, token: "atom", dedent: true },
                { regex: /(?<=\s|^)(?:\}>[A-Z]+<\{)(?=\s|$)/, token: "atom" },
                // word lists { ... } (multiline)
                { regex: /(?<=\s|^)\{(?=\s|$)/, token: "atom", indent: true },
                { regex: /(?<=\s|^)\}(?=\s|$)/, token: "atom", dedent: true },
                // definitions
                { regex: /(?<=\s|^)(?:2?constant|variable|2?=:|:_?|::_?|create)(?=\s|$)/, token: "builtin", next: "def" },
                // words
                { regex: /(?<=\s|^)(?:abort)(?=\")/, token: "keyword" },
                { regex: builtin_words, token: "variable-2"},
                { regex: fift_words, token: "variable-3"},
                { regex: asm_words, token: "meta"},
                // fallback
                { regex: /[^\s]+/, token: "variable"},
            ],
            comment: [
                { regex: /.*?\*\//, token: "comment", next: "start" },
                { regex: /.*/, token: "comment" }
            ],
            def: [
                { regex: /.*$/, token: "def", next: "start" },
            ],
            // The meta property contains global information about the mode. It
            // can contain properties like lineComment, which are supported by
            // all modes, and also directives like dontIndentStates, which are
            // specific to simple modes.
            meta: {
                dontIndentStates: ["comment"],
                lineComment: "//",
                blockCommentStart: "/*",
                blockCommentEnd: "*/"
            }
        });
        CodeMirror.defineMIME("text/x-fift", "fift");
        CodeMirror.modeInfo.push({
            ext: ["fif"],
            mime: "text/x-fift",
            mode: "fift",
            name: "Fift"
        });
    }
    return { onload: onload }
});